import aQute.bnd.gradle.Index

plugins {
  id "biz.aQute.bnd.builder"
}

apply from: gradle.oshCoreDir + '/common.gradle'
description = ''

allprojects {
//  version = oshCoreVersion
  version = '0.0.1'
}

repositories {
  repositories {
    jcenter()
    mavenCentral()
    maven {
      url "https://github.com/rosjava/rosjava_mvn_repo/raw/master"
    }
  }
}

subprojects {
  // inject all repositories from included builds if any
  repositories.addAll(rootProject.repositories)
}

dependencies {
  implementation 'org.sensorhub:sensorhub-core:' + oshCoreVersion
  implementation 'org.sensorhub:sensorhub-core-osgi:' + oshCoreVersion
  implementation 'org.sensorhub:sensorhub-datastore-h2:' + oshCoreVersion
  implementation 'org.sensorhub:sensorhub-service-consys:' + oshCoreVersion
  implementation 'org.sensorhub:sensorhub-service-swe:' + oshCoreVersion
  implementation 'org.sensorhub:sensorhub-service-sweapi:' + oshCoreVersion
  implementation 'org.sensorhub:sensorhub-utils-kryo:' + oshCoreVersion
  implementation 'org.sensorhub:sensorhub-webui-core:' + oshCoreVersion
}

distributions {
  main {
    distributionBaseName = 'osh-node'
    contents {
      from 'dist/scripts'
      from 'dist/keystores/osh-keystore.p12'
      into('trusted_certs') {
        from 'dist/trusted_certs'
      }
      into ('config') {
        from 'dist/config'
      }
      from 'README.md'
      into('web') {
        from 'web'
      }
      into('lib') {
        from project.configurations.runtimeClasspath
      }
      subprojects.each { p ->
        into('config/sensorML') {
          from("${p.projectDir}/sensorML")
        }
      }
    }
  }
}

apply from: gradle.oshCoreDir + '/release.gradle'

tasks.register("harvestBundles", Copy) {
  destinationDir = layout.buildDirectory.dir("bundles").get().asFile
  from project(':sensorhub-driver-template').osgi.outputs
}

tasks.register("genOSGiIndex", Index) {
  destinationDirectory = file(layout.buildDirectory.dir("bundles"))
  gzip = false
  bundles = fileTree(destinationDirectory) {
    include "**/*-bundle.jar"
    builtBy tasks.withType(Jar)
  }
}

tasks.register("bundlesDistZip", Zip) {
  from layout.buildDirectory.dir("bundles").get().asFile
  include '*'
  include '*/*' //to include contents of a folder present inside bundles directory
  archiveName 'osgi-bundles-' + project.version + '.zip'
  destinationDir(layout.buildDirectory.dir("distributions").get().asFile)
}

genOSGiIndex.dependsOn(harvestBundles)
bundlesDistZip.dependsOn(genOSGiIndex)